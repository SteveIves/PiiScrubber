;;*****************************************************************************
;;
;; Title:       RpsFieldCollection.dbl
;;
;; Type:        Class
;;
;; Description: Represents a collection of fields for a Repository structure
;;
;; Date:        19th October 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import CodeGen.RepositoryAPI
import System.Collections

namespace CodeGen.RepositoryAPI

    public enum RpsFieldCollectionMode
        Structure
        Group
    endenum

    public class RpsFieldCollection

        private mCollection, @ArrayList

        ;;Constructor (don't load any fields)
        public method RpsFieldCollection
            endparams
        proc
            RpsUtils.DbgLog("Constructor    : RpsFieldCollection()")
            mCollection = new ArrayList()
            RpsUtils.DbgLog("Constructor    : RpsFieldCollection() done")
        endmethod

        ;;Constructor (load fields for a structure or group)
        public method RpsFieldCollection
            required in LoadMode, RpsFieldCollectionMode
            required in StructureOrGroup, string
			endparams
			record
				str, String
			endrecord
        proc

            str = atrim(StructureOrGroup)

            RpsUtils.DbgLog("Constructor    : RpsFieldCollection("+string(LoadMode)+","+str+")")

            mCollection = new ArrayList()
            Repository.CheckIsOpen()

            using LoadMode select
			(RpsFieldCollectionMode.Structure),
			begin
				;;Preserve the name of the current structure
				;TODO: BUG: 9.5.3b falls over at runtime if this assignment is done as an initial value			
				data PreviousStructure, String
				PreviousStructure = atrim(Repository.RpsControl.sname)

				LoadStructureFields(str)
							
				;;If we switched to a different structure then set context back to the previous one
							
				;TODO:  BUG: There is a problem here with nested groups. Resetting the current structure loses our position
				;       within any group heirarchy that we were previously in, so somehow we need to reset that context also
							
				if (Repository.RpsControl.sname.nes.PreviousStructure)
				begin
					data ms_info, s_info
					RpsUtils.DbgLog("               : Set current structure to "+PreviousStructure)
					dd_struct(Repository.RpsControl,DDS_INFO,PreviousStructure,ms_info)
					if (Repository.RpsControl.error)
						throw new RpsStructureException("Failed to set context back to original structure  "+PreviousStructure)
				end
			end
			(RpsFieldCollectionMode.Group),
                LoadGroupFields(str)
            endusing

            RpsUtils.DbgLog("Constructor    : RpsFieldCollection("+string(LoadMode)+","+str+") done")

        endmethod

        ;;Destructor
        method ~RpsFieldCollection
        proc
            clear mCollection
        endmethod

        ;;Load structure fields
        private method LoadStructureFields, void
            required in StructureName, string
            endparams
            record local_data
                MemHandle, int
                ix, int
            endrecord
            record
                str, string
            endrecord
        proc
            init local_data
            str = %atrim(StructureName)
            RpsUtils.DbgLog("               : RpsFieldCollection.LoadStructureFields(StructureName="+str+")")
            try
            begin
                data ms_info, s_info
                ;;Set the current structure and get structure information
                RpsUtils.DbgLog("               : Set current structure to "+str)
                dd_struct(Repository.RpsControl,DDS_INFO,str,ms_info)
                if (Repository.RpsControl.error)
                    throw new RpsFieldException("Failed to get information for repository structure "+str)
                ;;Do we have any fields to load?
                if (ms_info.si_childct)
                begin
                    ;;Size the field names array and get field names
                    MemHandle = %mem_proc(DM_ALLOC,^size(strIdentifier)*ms_info.si_childct)
                    dd_field(Repository.RpsControl,DDF_SLIST,ms_info.si_childct,^m(strIdentifier,MemHandle))
                    if (Repository.RpsControl.error)
                        throw new RpsFieldException("Failed to get field names for repository structure "+str)
                    ;;Add fields to the collection
                    for ix from 1 thru ms_info.si_childct
                        mCollection.Add(new RpsField(StructureName,^m(strIdentifier[ix],MemHandle)))
                end
            end
            finally
            begin
                ;;Free field names array
                if (MemHandle)
                    MemHandle = %mem_proc(DM_FREE,MemHandle)
            end
            endtry

            RpsUtils.DbgLog("               : RpsFieldCollection.LoadStructureFields(StructureName="+str+") done")

        endmethod

        ;;Load group fields
        private method LoadGroupFields, void
            required in GroupName, String
            endparams
            record local_data
                MemHandle   ,int
                ix          ,int
            endrecord
        proc
            init local_data
            RpsUtils.DbgLog("               : RpsFieldCollection.LoadGroupFields(GroupName="+GroupName+")")
            try
            begin
                data mf_info, f_info

                ;;Get field information for group field
                dd_field(Repository.RpsControl,DDF_INFO,GroupName,^a(mf_info))
                if (Repository.RpsControl.error)
                    throw new RpsGroupException("Failed to get information for explicit group field "+GroupName)

                ;;Make sure this really is an explicit group
                if (!mf_info.fi_group||mf_info.fi_struct)
                    throw new RpsGroupException("Repository field "+GroupName+" is not an explicit group!")

                ;;Do we have any fields to load?
                if (mf_info.fi_mbrct)
                begin
                    ;;Set context to the requested group field
                    dd_field(Repository.RpsControl,DDF_GROUP,GroupName)
                    if (Repository.RpsControl.error)
                        throw new RpsGroupException("Failed to set field context to group "+GroupName)

                    ;;Size the field names array and get field names
                    MemHandle = %mem_proc(DM_ALLOC,^size(strIdentifier)*mf_info.fi_mbrct)
                    dd_field(Repository.RpsControl,DDF_SLIST,mf_info.fi_mbrct,^m(strIdentifier,MemHandle))
                    if (Repository.RpsControl.error)
                        throw new RpsGroupException("Failed to get field names for group "+GroupName)

                    ;;Add fields to the collection
                    for ix from 1 thru mf_info.fi_mbrct
                        mCollection.Add(new RpsField(^m(strIdentifier[ix],MemHandle)))

                    ;;Reset field context
                    dd_field(Repository.RpsControl,DDF_ENDGROUP)
                    if (Repository.RpsControl.error)
                        throw new RpsGroupException("Failed to reset field context from group "+GroupName)
                end
            end
            finally
            begin
                ;;Free field names array
                if (MemHandle)
                    MemHandle = %mem_proc(DM_FREE,MemHandle)
            end
            endtry

            RpsUtils.DbgLog("               : RpsFieldCollection.LoadGroupFields(GroupName="+GroupName+") done")

        endmethod

        ;;---------------------------------------------------------------------
        ;;Public methods and properties

        ;;Remove overlay fields from the collection
        public method RemoveOverlays, void
            record
                index, int
                field, @RpsField
            endrecord
        proc
            index=0
            repeat
            begin
                if (index<=(mCollection.Count-1)) then
                begin
                    field=(RpsField)mCollection[index]
                    if (field.OverlaysField) then
                        mCollection.RemoveAt(index)
                    else
                        index+=1
                end
                else
                    exitloop
            end
        endmethod

        ;;Remove fields marked as "Excluded by Language" from the collection
        public method RemoveExcludedByLanguage, void
            record
                index, int
                field, @RpsField
            endrecord
        proc
            index=0
            repeat
            begin
                if (index<=(mCollection.Count-1)) then
                begin
                    field=(RpsField)mCollection[index]
                    if (field.ExcludedByLanguage) then
                        mCollection.RemoveAt(index)
                    else
                        index+=1
                end
                else
                    exitloop
            end
        endmethod

        ;;Remove fields marked as "Excluded by Toolkit" from the collection
        public method RemoveExcludedByToolkit, void
            record
                index, int
                field, @RpsField
            endrecord
        proc
            index=0
            repeat
            begin
                if (index<=(mCollection.Count-1)) then
                begin
                    field=(RpsField)mCollection[index]
                    if (field.ExcludedByToolkit) then
                        mCollection.RemoveAt(index)
                    else
                        index+=1
                end
                else
                    exitloop
            end
        endmethod

        ;;Remove fields marked as "Excluded by ReportWriter" from the collection
        public method RemoveExcludedByReportWriter, void
            record
                index, int
                field, @RpsField
            endrecord
        proc
            index=0
            repeat
            begin
                if (index<=(mCollection.Count-1)) then
                begin
                    field=(RpsField)mCollection[index]
                    if (field.ExcludedByReportWriter) then
                        mCollection.RemoveAt(index)
                    else
                        index+=1
                end
                else
                    exitloop
            end
        endmethod

        ;;Remove fields marked as "Excluded by Web" from the collection
        public method RemoveExcludedByWeb, void
            record
                index, int
                field, @RpsField
            endrecord
        proc
            index=0
            repeat
            begin
                if (index<=(mCollection.Count-1)) then
                begin
                    field=(RpsField)mCollection[index]
                    if (field.ExcludedByWeb) then
                        mCollection.RemoveAt(index)
                    else
                        index+=1
                end
                else
                    exitloop
            end
        endmethod

        ;;; <summary>
        ;;; Expose the internal ArrayList so consumers can use FOREACH
        ;;; </summary>
        ;;; <returns>Internal ArrayList used to store the collection.</returns>
        public method GetEnumerator, @ArrayList
            endparams
        proc
            mreturn mCollection
        endmethod

        public method IsLastField, boolean
            required in fld, @RpsField
            endparams
        proc
            mreturn (mCollection.LastIndexOf(fld)==mCollection.Count-1)
        endmethod

        ;;---------------------------------------------------------------------
        ;;The follwoing members make the collection look just like an ArrayList

        ;;Gets or sets the number of elements that the collection can contain.
        public property Capacity, int
            method get
            proc
                mreturn mCollection.Capacity
            endmethod
            method set
            proc
                mCollection.Capacity = value
            endmethod
        endproperty

        ;;Gets the number of elements actually contained in the collection.
        public property Count, int
            method get
            proc
                mreturn mCollection.Count
            endmethod
        endproperty

        ;;Gets or sets the element at the specified index.
        public property Indexer, @RpsField
            required in Index, int
            method get
            proc
                mreturn (RpsField)mCollection[Index]
            endmethod
            method set
            proc
                mCollection[Index] = value
            endmethod
        endproperty

        ;;Gets or sets the element at the specified index.
        public property Indexer, @RpsField
            required in FieldName, String
            method get
                record
                    field   ,@RpsField
                endrecord
            proc
                foreach field in mCollection
                    if (field.Name.eqs.FieldName)
                        mreturn field
                mreturn ^null
            endmethod
        endproperty

        ;;Adds an element to the end of the collection.
        public method Add, int
            required in RpsField, @RpsField
            endparams
        proc
            mreturn mCollection.Add(RpsField)
        endmethod

        ;;Removes the element at the specified index of the collection.
        public method RemoveAt, void
            required in Index, int
        proc
            mCollection.RemoveAt(Index)
        endmethod

        ;;Searches for the specified element and returns the one-based index
        ;;of the first occurrence within the entire collection.
        public method IndexOf, int
            required in RpsField, @RpsField
        proc
            mreturn mCollection.IndexOf(RpsField)
        endmethod

        ;;Searches for the specified element and returns the one-based index
        ;;of the first occurrence within the range of elements in the collection
        ;;that extends from the specified index to the last element.
        public method IndexOf, int
            required in RpsField, @RpsField
            required in StartIndex, int
        proc
            mreturn mCollection.IndexOf(RpsField,StartIndex)
        endmethod

        ;;Searches for the specified element and returns the one-based index
        ;;of the first occurrence within the range of elements in the collection
        ;;that starts at the specified index and contains the specified number of
        ;;elements.
        public method IndexOf, int
            required in RpsField, @RpsField
            required in StartIndex, int
            required in Count, int
        proc
            mreturn mCollection.IndexOf(RpsField,StartIndex,Count)
        endmethod

        ;;Removes all elements from the collection.
        public method Clear, void
        proc
            mCollection.Clear()
        endmethod

        ;;Inserts an element into the collection at the specified index.
        public method Insert, void
            required in AtIndex, int
            required in RpsField, @RpsField
            endparams
        proc
            mCollection.Insert(AtIndex,RpsField)
        endmethod

        ;;Searches for the specified object and returns the one-based index of
        ;;the last occurrence within the entire collection.
        public method LastIndexOf, int
            required in RpsField, @RpsField
        proc
            mreturn mCollection.LastIndexOf(RpsField)
        endmethod

        ;;Searches for the specified object and returns the one-based index of
        ;;the last occurrence within the range of elements in the collection that
        ;;extends from the first element to the specified index.
        public method LastIndexOf, int
            required in RpsField, @RpsField
            required in StartIndex, int
        proc
            mreturn mCollection.LastIndexOf(RpsField,StartIndex)
        endmethod

        ;;Searches for the specified object and returns the one-based index of
        ;;the last occurrence within the range of elements in the collection that
        ;;contains the specified number of elements and ends at the specified index.
        public method LastIndexOf, int
            required in RpsField, @RpsField
            required in StartIndex, int
            required in Count, int
        proc
            mreturn mCollection.LastIndexOf(RpsField,StartIndex,Count)
        endmethod

    endclass

endnamespace
