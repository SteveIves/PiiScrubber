;;*****************************************************************************
;;
;; Title:       RpsEnumMemberCollection.dbl
;;
;; Type:        Class
;;
;; Description: Represents a collection of members for a Repository enumeration
;;
;; Date:        2nd November 2009
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import CodeGen.RepositoryAPI
import System.Collections

namespace CodeGen.RepositoryAPI

    public class RpsEnumMemberCollection

        private mCollection, @ArrayList

        ; Constructor (don't load any members)
        public method RpsEnumMemberCollection
            endparams
        proc
            RpsUtils.DbgLog("RpsEnumMemberCollection() constructor")
            mCollection = new ArrayList()
        endmethod

        ; Constructor (load members for named enum)
        public method RpsEnumMemberCollection
            required in EnumName, String
            endparams
        proc
            RpsUtils.DbgLog("RpsEnumMemberCollection(EnumName) constructor")
            mCollection = new ArrayList()
            Repository.CheckIsOpen()
            LoadMembers(EnumName)
        endmethod

        ; Destructor
        method ~RpsEnumMemberCollection
        proc
            clear mCollection
        endmethod

        ; Load members
        private method LoadMembers, void
            required in EnumName, String
            endparams
            record local_data
                MemHandleName, int
                MemHandleValue, int
                ix, int
            endrecord
            structure strEnumValue
                ,a11
            endstructure
        proc
            init local_data
            try
            begin
                data me_info, e_info
                ;Set the current enum and get enum information

                dd_enum(Repository.RpsControl,DDE_INFO,EnumName,^a(me_info))
                if (Repository.RpsControl.error)
                    throw new RpsEnumException("Failed to get information for repository enumeration "+EnumName)
                ;Do we have any members to load?
                if (me_info.ei_nmmbrs)
                begin
                    ;Size the member names and values arrays and get the data
                    MemHandleName = %mem_proc(DM_ALLOC,^size(strIdentifier)*me_info.ei_nmmbrs)
                    MemHandleValue = %mem_proc(DM_ALLOC,^size(strEnumValue)*me_info.ei_nmmbrs)
                    dd_enum(Repository.RpsControl,DDE_MBRS,me_info.ei_nmmbrs,^m(strIdentifier,MemHandleName),^m(strEnumValue,MemHandleValue))
                    if (Repository.RpsControl.error)
                        throw new RpsEnumException("Failed to get members for repository enumeration "+EnumName)
                    ;Add members to the collection
                    for ix from 1 thru me_info.ei_nmmbrs
                    begin
                        data MemberName , a30
                        data ExplicitValue, a11
                        data ImplicitValue, a11, ""
                        MemberName = ^m(strIdentifier[ix],MemHandleName)
                        ExplicitValue = ^m(strEnumValue[ix],MemHandleValue)
                        if (ExplicitValue) then
                            ImplicitValue = ExplicitValue
                        else
                        begin
                            ;;Figure out the implicit value for the new member
                            if (mCollection.Count==0) then
                                ImplicitValue = "0"
                            else
                            begin
                                ;Workaround for bug in %integer with negative numbers in 9.2.1
                                data mbr, @RpsEnumMember
                                data tmpd, d18
                                mbr = (RpsEnumMember)mCollection[mCollection.Count-1]
                                tmpd = mbr.ImplicitValue
                                ImplicitValue = tmpd + 1 [LEFT]
;                               ImplicitValue = integer(((RpsEnumMember)mCollection[mCollection.Count]).ImplicitValue) + 1 [LEFT]
                            end
                        end
                        mCollection.Add(new RpsEnumMember(EnumName,MemberName,ExplicitValue,ImplicitValue))
                    end
                end
            end
            finally
            begin
                ;Free arrays
                if (MemHandleName)
                    MemHandleName = %mem_proc(DM_FREE,MemHandleName)
                if (MemHandleValue)
                    MemHandleValue = %mem_proc(DM_FREE,MemHandleValue)
            end
            endtry
        endmethod

        ;;---------------------------------------------------------------------
        ;; Public methods and properties

        ;;; <summary>
        ;;; Expose the internal ArrayList so consumers can use FOREACH
        ;;; </summary>
        ;;; <returns>Internal ArrayList used to store the collection.</returns>
        public method GetEnumerator, @ArrayList
            endparams
        proc
            mreturn mCollection
        endmethod

        ;-----------------------------------------------------------------------
        ;The follwoing members make the collection look just like an ArrayList

        ;Gets or sets the number of elements that the collection can contain.
        public property Capacity, int
            method get
            proc
                mreturn mCollection.Capacity
            endmethod
            method set
            proc
                mCollection.Capacity = value
            endmethod
        endproperty

        ;Gets the number of elements actually contained in the collection.
        public property Count, int
            method get
            proc
                mreturn mCollection.Count
            endmethod
        endproperty

        ;Gets or sets the element at the specified index.
        public property Indexer, @RpsEnumMember
            required in Index, int
            method get
            proc
                mreturn (RpsEnumMember)mCollection[Index]
            endmethod
            method set
            proc
                mCollection[Index] = value
            endmethod
        endproperty

        ;Gets or sets the element at the specified index.
        public property Indexer, @RpsEnumMember
            required in MemberName, a
            method get
                record
                    Index   ,int
                    Found   ,boolean
                endrecord
            proc
                Found = false
                for Index from 0 thru mCollection.Count-1
                begin
                    if (((RpsEnumMember)mCollection[Index]).Name==MemberName)
                    begin
                        Found = true
                        exitloop
                    end
                end
                if (Found) then
                    mreturn (RpsEnumMember)mCollection[Index]
                else
                    mreturn ^null
            endmethod
        endproperty

        ;Adds an element to the end of the collection.
        public method Add, int
            required in RpsEnumMember, @RpsEnumMember
            endparams
        proc
            mreturn mCollection.Add(RpsEnumMember)
        endmethod

        ;Removes the element at the specified index of the collection.
        public method RemoveAt, void
            required in Index, int
        proc
            mCollection.RemoveAt(Index)
        endmethod

        ;Searches for the specified element and returns the one-based index
        ;of the first occurrence within the entire collection.
        public method IndexOf, int
            required in RpsEnumMember, @RpsEnumMember
        proc
            mreturn mCollection.IndexOf(RpsEnumMember)
        endmethod

        ;Searches for the specified element and returns the one-based index
        ;of the first occurrence within the range of elements in the collection
        ;that extends from the specified index to the last element.
        public method IndexOf, int
            required in RpsEnumMember, @RpsEnumMember
            required in StartIndex, int
        proc
            mreturn mCollection.IndexOf(RpsEnumMember,StartIndex)
        endmethod

        ;Searches for the specified element and returns the one-based index
        ;of the first occurrence within the range of elements in the collection
        ;that starts at the specified index and contains the specified number of
        ;elements.
        public method IndexOf, int
            required in RpsEnumMember, @RpsEnumMember
            required in StartIndex, int
            required in Count, int
        proc
            mreturn mCollection.IndexOf(RpsEnumMember,StartIndex,Count)
        endmethod

        ;Removes all elements from the collection.
        public method Clear, void
        proc
            mCollection.Clear()
        endmethod

        ;Inserts an element into the collection at the specified index.
        public method Insert, void
            required in AtIndex, int
            required in RpsEnumMember, @RpsEnumMember
            endparams
        proc
            mCollection.Insert(AtIndex,RpsEnumMember)
        endmethod

        ;Searches for the specified object and returns the one-based index of
        ;the last occurrence within the entire collection.
        public method LastIndexOf, int
            required in RpsEnumMember, @RpsEnumMember
        proc
            mreturn mCollection.LastIndexOf(RpsEnumMember)
        endmethod

        ;Searches for the specified object and returns the one-based index of
        ;the last occurrence within the range of elements in the collection that
        ;extends from the first element to the specified index.
        public method LastIndexOf, int
            required in RpsEnumMember, @RpsEnumMember
            required in StartIndex, int
        proc
            mreturn mCollection.LastIndexOf(RpsEnumMember,StartIndex)
        endmethod

        ;Searches for the specified object and returns the one-based index of
        ;the last occurrence within the range of elements in the collection that
        ;contains the specified number of elements and ends at the specified index.
        public method LastIndexOf, int
            required in RpsEnumMember, @RpsEnumMember
            required in StartIndex, int
            required in Count, int
        proc
            mreturn mCollection.LastIndexOf(RpsEnumMember,StartIndex,Count)
        endmethod

    endclass

endnamespace
