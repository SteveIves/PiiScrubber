;;*****************************************************************************
;;
;; Title:       RpsStructure.dbl
;;
;; Type:        Class
;;
;; Description: Represents a single Repository structure definition
;;
;; Date:        19th October 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import CodeGen.RepositoryAPI

namespace CodeGen.RepositoryAPI

    public partial class RpsStructure

        ;; Structure attribute data
        protected ms_info           ,s_info
        protected mStructureName    ,String     ;; Structure name
        protected mDescription      ,String     ;; Description
        protected mLongDescription  ,String     ;; Long description
        protected mUserText         ,String     ;; User text
        protected mFields           ,@RpsFieldCollection
        protected mKeys             ,@RpsKeyCollection
        protected mFiles            ,@RpsFileCollection
        protected mTags             ,@RpsTagCollection
        protected mFormats          ,@RpsFormatCollection
        protected mRelations        ,@RpsRelationCollection
        ;protected mTagName         ,String     ;;Name of repository tag definition
        ;protected mTagField        ,String     ;;Name of structures tag field
        ;protected mTagValue        ,String     ;;Tag value
        ;protected mTagEndValue     ,String     ;;Tag end value

        ;; Constructor, load structure by name, load all fields
        public method RpsStructure
            required in StructureName, string
            endparams
            record
                pos ,int
                str ,string
                grp ,string
            endrecord
        proc
            mDescription = ""
            mLongDescription = ""
            mUserText = ""
            ;mTagName = ""
            ;mTagField = ""
            ;mTagValue = ""
            ;mTagEndValue = ""

            str = atrim(StructureName.ToUpper())
            grp = ""

            RpsUtils.DbgLog("Constructor    : RpsStructure("+str+")")
            Repository.CheckIsOpen()

            ;; Do we have a period in the requested structure name?
            if (pos=%instr(1,str,"."))
            begin
                if ((pos>1)&&(pos<str.Length)) then
                begin
                    grp = str(pos+1,str.Length)
                    str = str(1:pos-1)
                    RpsUtils.DbgLog("               : Structure: " + str + " Group: " + grp)
                end
                else
                    throw new RpsStructureException("Invalid group path "+str)
            end

            ;; Load the structure
            LoadStructure(str)

            ;; If we're using an implicit group then adjust the structure accordingly
            if (grp.Length)
            begin
                data ix, int
                data gf, @RpsField
                data cf, @RpsField
                data newLen, int

                ;; Remove all fields except for the specified group
                ix = -1
                while ((ix+=1)<this.Fields.Count)
                begin
                    if (this.Fields[ix].Name.eqs.grp) then
                        gf = mFields[ix]
                    else
                    begin
                        mFields.RemoveAt(ix)
                        ix-=1
                    end
                end

                ;;Make sure the specified group exists and is an explicit group
                if (gf==^null) then
                    throw new RpsFieldNotFoundException(str,grp)
                else
                begin
                    if (!gf.IsGroup)
                        throw new RpsFieldException("Field "+str+"."+grp+" is not a group.")
                    if (gf.GroupStructure)
                        throw new RpsFieldException("Field "+str+"."+grp+" is an implicit group. Generate from structure "+gf.GroupStructure+" instead.")
                end

                ;; Use information from the group field to re-configure the structure
                this.Name = gf.Name
                this.Alias = gf.Name
                this.Description = gf.Description
                this.LongDescription = gf.LongDescription
                this.ChildCount = gf.GroupFields.Count
                this.FileType = "ASCII"
                this.UserText = gf.UserText
                this.FirstFile = ""

                this.mKeys = new RpsKeyCollection()
                this.mFiles = new RpsFileCollection()
                this.mTags = new RpsTagCollection()
                this.mFormats = new RpsFormatCollection()
                this.mRelations = new RpsRelationCollection()

                this.TagType = RpsTagType.None
                ;this.TagName = ""
                ;this.TagField = ""
                ;this.TagValue = ""
                ;this.TagEndValue = ""
                this.DisplayField = ""
                this.MappedStructure = ""
                this.MappedFileSpec = ""

                ;; Move the group's fields up into the structure
                foreach cf in gf.GroupFields.GetEnumerator()
                    this.Fields.Add(cf)

                ;; And remove the group field
                this.Fields.RemoveAt(0)

                ;; Set the new structure length
                ix=-1
                newLen=0
                while ((ix+=1)<mFields.Count)
                    newLen+=this.Fields[ix].Size

                this.Length = newLen

                this.IsFake = true

            end

            RpsUtils.DbgLog("Constructor    : RpsStructure("+str+") done")

        endmethod

        ;; Constructor, load structure by name, fields passed in
        public method RpsStructure
            required in StructureName, string
            required in Fields, @RpsFieldCollection
            endparams
            record
                str ,string
            endrecord
        proc
            mDescription = ""
            mLongDescription = ""
            mUserText = ""
            ;mTagName = ""
            ;mTagField = ""
            ;mTagValue = ""
            ;mTagEndValue = ""

            str = atrim(StructureName.ToUpper())
            RpsUtils.DbgLog("Constructor    : RpsStructure(StructureName="+str+",ExistingFields="+%string(Fields.Count)+")")
            mFields = Fields
            Repository.CheckIsOpen()
            LoadStructure(str)
            RpsUtils.DbgLog("Constructor    : RpsStructure(StructureName="+str+",ExistingFields="+%string(Fields.Count)+") done")
        endmethod

        ;; Destructor
        method ~RpsStructure
        proc
            clear mFields, mKeys, mFiles, mTags, mFormats, mRelations
        endmethod

        ;; LoadStructure method
        private method LoadStructure, void
            required in StructureName, string
            endparams
        proc
            ;; Save the structure name
            mStructureName = StructureName

            RpsUtils.DbgLog("               : RpsStructure.LoadStructure(StructureName="+mStructureName+")")

            ;; Load structure information
            dd_struct(Repository.RpsControl,DDS_INFO,mStructureName,ms_info)
            if (Repository.RpsControl.error)
                throw new RpsStructureNotFoundException(mStructureName)
            RpsUtils.DbgLog("               : Set current structure to "+mStructureName)

            ;; Load the structures text-based attributes

            ;; Description
            if (ms_info.si_desc)
            begin
                data tmpDescription, a40
                xcall dd_struct(Repository.RpsControl,DDS_TEXT,ms_info.si_desc,tmpDescription)
                if (Repository.RpsControl.error) then
                    throw new RpsStructureException("Failed to get description for repository structure "+mStructureName)
                else
                    mDescription = atrim(tmpDescription)
            end

            ;; Long description
            if (ms_info.si_ldesc)
            begin
                data tmpDescription, a1800
                dd_struct(Repository.RpsControl,DDS_TEXT,ms_info.si_ldesc,tmpDescription)
                if (Repository.RpsControl.error) then
                    throw new RpsStructureException("Failed to get long description for repository structure "+mStructureName)
                else
                    mLongDescription = atrim(tmpDescription)
            end

            ;; User text string
            if (ms_info.si_utext)
            begin
                data tmpUserText, a60
                dd_struct(Repository.RpsControl,DDS_TEXT,ms_info.si_utext,tmpUserText)
                if (Repository.RpsControl.error) then
                    throw new RpsStructureException("Failed to get user text for repository structure "+mStructureName)
                else
                    mUserText = atrim(tmpUserText)
            end

            ;; If we don't already have a fields collection (because it was
            ;; passed into the constructor, then load the fields from RPS
            if (mFields==^null)
                mFields = new RpsFieldCollection(RpsFieldCollectionMode.Structure,mStructureName)

            ;; Now load the other collection properties

            mKeys = new RpsKeyCollection(mStructureName)
            mFiles = new RpsFileCollection(mStructureName)
            mTags = new RpsTagCollection(mStructureName)
            mFormats = new RpsFormatCollection(mStructureName)
            mRelations = new RpsRelationCollection(mStructureName)

            ;; CodeGen specific attributes
            loadCodeGenData(StructureName)

        endmethod

        ;;---------------------------------------------------------------------
        ;; Public properties to expose the structures attributes

        ;; Fields collection
        public property Fields, @RpsFieldCollection
            method get
            proc
                mreturn mFields
            endmethod
        endproperty

        ;; Keys collection
        public property Keys, @RpsKeyCollection
            method get
            proc
                mreturn mKeys
            endmethod
        endproperty

        ;; Files collection
        public property Files, @RpsFileCollection
            method get
            proc
                mreturn mFiles
            endmethod
        endproperty

        ;; Tags collection
        public property Tags, @RpsTagCollection
            method get
            proc
                mreturn mTags
            endmethod
        endproperty

        ;; Formats collection
        public property Formats, @RpsFormatCollection
            method get
            proc
                mreturn mFormats
            endmethod
        endproperty

        ;; Relations collection
        public property Relations, @RpsRelationCollection
            method get
            proc
                mreturn mRelations
            endmethod
        endproperty

        ;; Structure name
        public property Name, String
            method get
            proc
                mreturn mStructureName
            endmethod
            private method set
            proc
                mStructureName = atrim(value.ToUpper())
            endmethod
        endproperty

        ;; File type (a15, ie "DBL ISAM", "ASCII")
        public property FileType, a
            method get
            proc
                mreturn %atrim(ms_info.si_filtyp)
            endmethod
            private method set
            proc
                ms_info.si_filtyp = value
            endmethod
        endproperty

        ;; Description
        public property Description, String
            method get
            proc
                mreturn mDescription
            endmethod
            private method set
            proc
                mDescription = atrim(value)
            endmethod
        endproperty

        ;; Long description
        public property LongDescription, String
            method get
            proc
                mreturn mLongDescription
            endmethod
            private method set
            proc
                mLongDescription = atrim(value)
            endmethod
        endproperty

        ;; User text
        public property UserText, String
            method get
            proc
                mreturn mUserText
            endmethod
            private method set
            proc
                mUserText = atrim(value)
            endmethod
        endproperty

        ;; Record size (d5)
        public property Length, int
            method get
            proc
                mreturn ms_info.si_recsz
            endmethod
            private method set
            proc
                ms_info.si_recsz = value
            endmethod
        endproperty

        ;; Number of fields/groups in first level (d3)
        public property ChildCount, int
            method get
            proc
                mreturn ms_info.si_childct
            endmethod
            private method set
            proc
                ms_info.si_childct = value
            endmethod
        endproperty

        ;; Structure tag type (enum RpsTagType)
        ;;   None, 0
        ;;   FieldAndValue, 1
        ;;   RecordSize, 2
        public property TagType, RpsTagType
            method get
            proc
                mreturn (RpsTagType)integer(ms_info.si_tagtyp)
            endmethod
            private method set
            proc
                ms_info.si_tagtyp = %integer(value)
            endmethod
        endproperty

        ;; First (or only) file assigned to (a30)
        public property FirstFile, a
            method get
            proc
                mreturn %atrim(ms_info.si_file)
            endmethod
            private method set
            proc
                ms_info.si_file = value
            endmethod
        endproperty

;		;; Name of repository tag definition
;		public property TagName, String
;			method get
;			proc
;				mreturn mTagName
;			endmethod
;			method set
;			proc
;				mTagName = atrim(value)
;			endmethod
;		endproperty
;
;		;; Name of structures tag field
;		public property TagField, String
;		method get
;		proc
;			mreturn mTagField
;		endmethod
;		method set
;		proc
;			mTagField = atrim(value)
;		endmethod
;		endproperty
;
;;		;; Tag value
;		public property TagValue, String
;		method get
;		proc
;			mreturn mTagValue
;		endmethod
;		method set
;		proc
;			mTagValue = atrim(value)
;		endmethod
;		endproperty
;
;		;; Tag end value
;		public property TagEndValue, String
;			method get
;			proc
;				mreturn mTagEndValue
;			endmethod
;			method set
;			proc
;				mTagEndValue = atrim(value)
;			endmethod
;		endproperty

    endclass

	public partial class RpsStructure
		
		;; CodeGen specific attribute data
		protected mStructureAlias   ,String     ;;Structure alias (CodeGen)
		protected mMappedStructure  ,String     ;;Name of mapped structure
		protected mMappedFileSpec   ,String     ;;File spec of mapped file
		protected mDisplayField     ,String        ;;Name of display field
		protected mIsFake           ,boolean    ;;Structure is fake (not in repository)
		
		private method loadCodeGenData, void
			required in StructureName, string
			endparams
		proc
			;; Default the alias to the same as the structure name
			mStructureAlias = mStructureName

			;; Load mapped structure
			mMappedStructure = RpsUtils.GetMappedStructure(mStructureName,mUserText,mLongDescription)
			
			;; Load file associated with mapped structure
			if (mMappedStructure) then
			begin
				data tmp_sinfo  ,s_info
				data tmp_flinfo ,fl_info
				
				;; Get the structure info for the mapped structure
				xcall dd_struct(Repository.RpsControl,DDS_INFO,mMappedStructure,tmp_sinfo)
				
				;; Get the file info for the first (or only) file
				;; TODO: Shouldn't need the ^a cast but .NET won't work without it.
				xcall dd_file(Repository.RpsControl,DDL_INFO,tmp_sinfo.si_file,^a(tmp_flinfo))
				
				mMappedFileSpec = tmp_flinfo.fli_fname
				
            end
            else
                mMappedFileSpec = ""
			
		endmethod
		
		;;---------------------------------------------------------------------
		;; Public properties to expose the structures attributes
		
		;; Structure alias
		public property Alias, String
			method get
			proc
				mreturn mStructureAlias
			endmethod
			method set
			proc
				mStructureAlias = atrim(value)
			endmethod
		endproperty
		
		;; Name of mapped structure (@MAP=structure; in user text)
		public property MappedStructure, String
			method get
			proc
				mreturn mMappedStructure
			endmethod
			private method set
			proc
				mMappedStructure = atrim(value)
			endmethod
		endproperty
		
		;; Mapped file specification (from MappedStruct)
		public property MappedFileSpec, String
			method get
			proc
				mreturn mMappedFileSpec
			endmethod
			private method set
			proc
				mMappedFileSpec = atrim(value)
			endmethod
		endproperty
		
		;; Name of strucures display field (@CODEGEN_DISPLAY_FIELD in a fields user text)
		public property DisplayField, String
			method get
            proc
                if (mDisplayField==^null)
                    mDisplayField=""
				mreturn mDisplayField
			endmethod
			method set
			proc
				mDisplayField = atrim(value)
			endmethod
		endproperty
		
		public property IsFake, boolean
			method get
			proc
				mreturn mIsFake
			endmethod
			private method set
			proc
				mIsFake = value
			endmethod
		endproperty
		
	endclass

endnamespace

